# stringify
snippet jstr
JSON.stringify($1);$0
endsnippet

# parse
snippet jparse
JSON.parse($1);$0
endsnippet

# require
snippet req
require("$1")$0
endsnippet

# if main
snippet if_main
// ignore:start

if (require.main === module) {
	$0
}

// ignore:end
endsnippet

# console.log
snippet log
console.log($1);$0
endsnippet

# console.warn
snippet warn
console.warn($1);$0
endsnippet

# console.info
snippet info
console.info($1);$0
endsnippet

# console.error
snippet error
console.error($1);$0
endsnippet

# function
snippet iife
(function(${1}) {
	$0
}());
endsnippet

# function
snippet fn
function ${1:function_name}($2) {
	$0
}$3
endsnippet

# async arrow function
snippet aafn
async (${1:}) => ${2:{
	$3
}}
endsnippet

# async arrow IIFE
snippet aaII
(async (${1:}) => {
	$0
})()${2:;}
endsnippet

# async IIFE
snippet aII
(async function ${1:function_name}(${2:}) {
	$0
})()${2:;}
endsnippet

# async function
snippet afn
async function ${1:function_name}($2) {
	$0
}$3
endsnippet

# Exports
snippet ex "export common js pattern"
module.exports = ${1:thing};$0
endsnippet

snippet exc "export class"
class ${1:ClassName} {
	${2:constructor}(${3:params}) {
		$0
	}
}

module.exports = $1;
endsnippet

snippet exs "export service"
class ${1:ClassName}Service {
	${2:constructor}(${3:params}) {
		$0
	}
}

module.exports = new $1Service();
endsnippet

# function
snippet exfn
module.exports = function ${1:function_name}($2) {
	$0
};
endsnippet

# function
snippet exfna
module.exports = ${1:params} => {
	$0
};
endsnippet

# Anonymous function
snippet fna
${1:params} => $2$0
endsnippet

# Anonymous function ends with semicolon
snippet fnae
function($1) {
	$0
};
endsnippet

# Class
snippet class
class ${1:ConstructorName} {
	${3:constructor}(${4:params}) {
		$0
	}
}$2
endsnippet

# if condition
snippet if
if (${1:condition}) {
	$0
}
endsnippet

# for loop number of times iterate
snippet for
for (${2:let }${3:i} = ${4:0}; $3 < ${1:length}; ++$3) {
	$0
}
endsnippet

# for-of statement
snippet forof
for (${3:const} ${2:element} of ${1:elements}) {
	$0
}
endsnippet

snippet eachr
for (${3:let }${2:i} = ${1:items}.length - 1; $2 >= 0; --$2) {
	$0
}
endsnippet

snippet reduce
${1:array}.reduce((${3:result}, ${4:element}) => {
	return ${5:result};
}, ${2:default});
endsnippet

snippet fil
${1:array}.filter(${2:value} => {
	$0
});
endsnippet

snippet map
${1:array}.map(${2:value} => $0);
endsnippet

snippet ev
${1:array}.every(${2:value} => $0);
endsnippet

snippet some
${1:array}.some(${2:value} => {
	$0
});
endsnippet

snippet switch
switch (${1:value}) {
	case ${2:case_value}:
		$0
		break;
}
endsnippet

snippet des
describe("${1:description}", () => {
	$0
});
endsnippet

snippet it
it("should $1", (${2:done}) => {
	$0
});
endsnippet

snippet bef
beforeEach(() => {
	$0
});
endsnippet

snippet aft
afterEach(() => {
	$0
});
endsnippet

snippet try
try {
	$0
} catch (e) {$1}
endsnippet

snippet expect
expect(${1:value}).to.be(${2:expectation});$0
endsnippet

snippet strict
"use strict";$0
endsnippet

snippet ctr
constructor : function($1) {
	$0
}
endsnippet

snippet jeefo_class
jeefo_class.create("${1:NewClassName}", ${2:BaseClass}, {
	constructor : function($3) {
		$0
	}
});
endsnippet

snippet @ret
@returns {${1:type}} - ${2:description}
endsnippet

snippet @par
@param ${1:param_name} {${2:type}} - ${3:description}
endsnippet

snippet doc
/**
 * $0
 */
endsnippet

snippet indxdb "indexedDB new feature on browser"
indexedDB
endsnippet

snippet api
const Router = require("jeefo-router");

const router = new Router();

router.register({
  path   : "",
  method : "GET",
}, (req, res) => {
	res.sendStatus(200);
});

module.exports = router;
endsnippet